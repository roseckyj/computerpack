#file: ./translating
if('data entity @s {Tags:["compilation_translating"]}') {
    /function computercraft:machines/compiler/compilation/translating_loop

    if (!'data block ~ ~ ~ Items[{Slot:11b}].tag.compilation.input[]') {
        /function computercraft:machines/compiler/compilation/translating_after
    }
}

#file: ./translating_before
/tag @s remove compilation_translating_done
/tag @s add compilation_translating
/data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.input set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.output
/data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.output set value []

#file: ./translating_after
/tag @s remove compilation_translating
/tag @s add compilation_translating_done
/tag @s add compilation_next


#file: ./translating_loop
/data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_read set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.input[0]
/data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_write set value {type: "item"}
/data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_write.id set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_read.id
/data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_write.count set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_read.Count

modal parse_paper(model, type, id, assignable) {
    if('data block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_read.tag{CustomModelData:$(model)}') {
        /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_write set value {type: "$(type)", id: "$(id)", assignable: $(assignable)b}
    }
}
modal parse_paper_number(model, type, value, assignable) {
    if('data block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_read.tag{CustomModelData:$(model)}') {
        /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_write set value {type: "$(type)", value: $(value), assignable: $(assignable)b}
    }
}

// Translate known commands
if('data block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_read{id:"minecraft:paper"}') {
    parse_paper(24002, "cmd_robot", "forward", 0)
    parse_paper(24003, "cmd_robot", "right", 0)
    parse_paper(24004, "cmd_robot", "left", 0)
    parse_paper(24005, "control", "if", 0)
    parse_paper(24006, "cmd_robot", "dig", 0)
    parse_paper(24007, "cmd_robot", "up", 0)
    parse_paper(24008, "cmd_robot", "down", 0)
    parse_paper(24009, "cmd_robot", "back", 0)
    parse_paper(24010, "bracket_close", "{}", 0)
    parse_paper(24011, "bracket_open", "{}", 0)
    parse_paper(24012, "control", "for", 0)
    parse_paper(24013, "bracket_close", "()", 0)
    parse_paper(24014, "bracket_open", "()", 0)
    parse_paper(24015, "control", "else", 0)
    parse_paper(24016, "cmd_robot", "dig_up", 0)
    parse_paper(24017, "cmd_robot", "dig_down", 0)
    parse_paper(24018, "cmd_robot", "hit", 0)
    parse_paper(24019, "control", "to", 0)
    parse_paper_number(24020, "number", 0, 1)
    parse_paper_number(24021, "number", 1, 1)
    parse_paper_number(24022, "number", 2, 1)
    parse_paper_number(24023, "number", 3, 1)
    parse_paper_number(24024, "number", 4, 1)
    parse_paper_number(24025, "number", 5, 1)
    parse_paper_number(24026, "number", 6, 1)
    parse_paper_number(24027, "number", 7, 1)
    parse_paper_number(24028, "number", 8, 1)
    parse_paper_number(24029, "number", 9, 1)
    parse_paper(24030, "operator", "==", 0)
    parse_paper(24031, "operator", "!=", 0)
    parse_paper(24032, "operator", ">", 0)
    parse_paper(24033, "operator", "<", 0)
    parse_paper(24034, "assign_val", "=", 0)
    parse_paper(24035, "operator", "+", 0)
    parse_paper(24036, "operator", "-", 0)
    parse_paper(24037, "operator", "*", 0)
    parse_paper(24038, "operator", "/", 0)
    parse_paper(24039, "operator", "%", 0)
    parse_paper(24040, "const", "X", 1)
    parse_paper(24041, "const", "Y", 1)
    parse_paper(24042, "const", "Z", 1)
    parse_paper(24043, "const", "block_front", 1)
    parse_paper(24044, "const", "block_up", 1)
    parse_paper(24045, "const", "block_down", 1)
    parse_paper(24046, "const", "angle", 1)
    parse_paper(24047, "const", "mobs", 1)
    parse_paper(24048, "control", "while", 0)
    parse_paper(24050, "var", "a", 1)
    parse_paper(24051, "var", "b", 1)
    parse_paper(24052, "var", "c", 1)
    parse_paper(24053, "var", "d", 1)
    parse_paper(24054, "var", "e", 1)
    parse_paper(24055, "var", "f", 1)
    parse_paper(24056, "var", "g", 1)
    parse_paper(24057, "var", "h", 1)
    parse_paper(24058, "var", "i", 1)
    parse_paper(24059, "var", "j", 1)
    parse_paper(24060, "var", "k", 1)
    parse_paper(24061, "var", "x", 1)
    parse_paper(24062, "var", "y", 1)
    parse_paper(24063, "var", "z", 1)
    parse_paper(24064, "operator", "<=", 0)
    parse_paper(24065, "operator", ">=", 0)
}

/data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_write.page set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_read.page
/data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_write.slot set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_read.Slot

/data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.output append from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_write
/data remove block ~ ~ ~ Items[{Slot:11b}].tag.compilation.input[0]
#file: ./controls

// {memory:{src:[],res:[]},stack:[]}

// Recursion emulation
modal push_stack() {
    /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.stack prepend from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory
    /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory set value {src:[],res:[]}
}

modal pop_stack() {
    /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.stack[0]
    /data remove block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.stack[0]
}

// If source is empty, pop stack
if (!'data block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.src[]') {
    /tag @s add compilation_empty_stack
}
if('data entity @s {Tags:["compilation_empty_stack"]}') {
    // Store current res to temp
    /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.res
    // Pop stack
    pop_stack()
    // Save temp to brackets
    /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.src[0].children set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp
    // Move brackets to res
    /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.res prepend from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.src[0]
    /data remove block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.src[0]
    /tag @s remove compilation_empty_stack
}

if (!'data block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.src[]') {
    compilation_error("Brackets without control block", "no control block (e.g. IF, FOR) found")
}

// Read first (last) command from source to TEMP
/data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.src[0]

if(!'data entity @s {Tags:["compilation_special_type"]}') {
    if('data block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp{type:2}') {
        // If brackets, stack whole memory and use children of brackets as new source
        push_stack()
        /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.src set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp.children

        /tag @s add compilation_special_type
    }
    if('data block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp{cmd:24005}') {
        // If "IF" statement
        /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp1 set value {}
        /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp2 set value {}
        /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp3 set value {}
        /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp4 set value {}
        /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp1 set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.res[0]
        /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp2 set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.res[1]
        /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp3 set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.res[2]
        /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp4 set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.res[3]

        /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_res set value {type: 3, condition: [], then: [], else: []}

        if('data block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp1{type:2,style:2}' && 'data block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp2{type:2,style:1}' && 'data block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp3{cmd:24015}' && 'data block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp4{type:2,style:1}') {
            // if () {} else {}
            /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_res.condition set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp1.children
            /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_res.then set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp2.children
            /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_res.else set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp4.children

            // Allways remove first, because it shifts
            /data remove block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.res[0]
            /data remove block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.res[0]
            /data remove block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.res[0]
            /data remove block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.res[0]

            /data remove block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.src[0]
            /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.res prepend from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_res
            /tag @s add compilation_special_type
        }
        if('data block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp1{type:2,style:2}' && 'data block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp2{type:2,style:1}') {
            // if () {}
            /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_res.condition set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp1.children
            /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_res.then set from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp2.children

            // Allways remove first, because it shifts
            /data remove block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.res[0]
            /data remove block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.res[0]

            /data remove block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.src[0]
            /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.res prepend from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp_res
            /tag @s add compilation_special_type
        }
        compilation_error("Invalid IF style", "if-then or if-then-else expected")
    }

    // Other commands and items
    /data modify block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.res prepend from block ~ ~ ~ Items[{Slot:11b}].tag.compilation.temp
    /data remove block ~ ~ ~ Items[{Slot:11b}].tag.compilation.controls.memory.src[0]
}
/tag @s remove compilation_special_type